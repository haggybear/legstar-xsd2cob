## ==================================================================
## Generates an ant script for XML Schema to Cobol translation
##
<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================================================================
     This script translates an XML Schema to COBOL.
 -->
<project basedir="${antModel.productLocation}" default="signalSuccess" name="translate-xsd-to-cobol-structure">

    <!-- ===========================================================  -->
    <!-- Setup environment
    -->
    <target name="init">
    
        <!-- XML Schema to COBOL Structure translator ant task  -->
        <taskdef name="xsd2cob"
            classname="com.legstar.xsd.def.Xsd2CobTask">
            <classpath>
                <fileset dir="${basedir}" includes="lib/*.jar"/>
                <pathelement location="${basedir}/conf"/>
            </classpath>
        </taskdef>
    
    </target>

    <!-- ===========================================================  -->
    <!-- Translate XML Schema
    -->
    <target name="xsdToCobol" depends="init">
        <echo message="Translating ${antModel.inputXsdUri}" />
        <xsd2cob>
            <options 
#if(${antModel.newTargetNamespace})
                newTargetNamespace="${antModel.newTargetNamespace}"
#end
                inputXsdUri="${antModel.inputXsdUri}"
                targetXsdFile="${antModel.targetXsdFile}"
                targetCobolFile="${antModel.targetCobolFile}"
#if(${antModel.targetCobolEncoding})
                targetCobolEncoding="${antModel.targetCobolEncoding}"
#end
#if(${antModel.customXsltFileName})
                customXsltFileName="${antModel.customXsltFileName}"
#end
            >
                <xsdConfig
                    alphanumericLen="${antModel.xsdConfig.alphanumericLen}"
                    octetStreamLen="${antModel.xsdConfig.octetStreamLen}"
                    intTotalDigits="${antModel.xsdConfig.intTotalDigits}"
                    shortTotalDigits="${antModel.xsdConfig.shortTotalDigits}"
                    boolTotalDigits="${antModel.xsdConfig.boolTotalDigits}"
                    longTotalDigits="${antModel.xsdConfig.longTotalDigits}"
                    decTotalDigits="${antModel.xsdConfig.decTotalDigits}"
                    decFracDigits="${antModel.xsdConfig.decFracDigits}"
                    singleFloatByteLen="${antModel.xsdConfig.singleFloatByteLen}"
                    doubleFloatByteLen="${antModel.xsdConfig.doubleFloatByteLen}"
                    maxOccurs="${antModel.xsdConfig.maxOccurs}"
                />
#foreach($newRootElement in $antModel.newRootElements)
                <newRootElement elementName="${newRootElement.elementName}" typeName="${newRootElement.typeName}"/>
#end
            </options>
        </xsd2cob>
        <echo message="XML Schema successfully translated" />
        <echo message="COBOL copybook generated in ${antModel.targetCobolFile}" />
        <echo message="COBOL-annotated XML schema generated in ${antModel.targetXsdFile}" />
    </target>
  
    <!-- ===========================================================  -->
    <!-- Delete the probe file to signal success
    -->
    <target name="signalSuccess" depends="xsdToCobol">
        <delete file="${antModel.probeFile}" quiet="true"/>
    </target>
    
</project>